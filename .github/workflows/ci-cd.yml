name: CI/CD Pipeline
on:
  push:
    branches: [devops]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-backend

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Login to Docker Hub
      - name: Login to Docker Hub
        run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      # Build and push frontend
      - name: Build Frontend
        run: docker build -t $FRONTEND_IMAGE:$GITHUB_SHA -f frontend/Dockerfile frontend/
      - name: Push Frontend
        run: docker push $FRONTEND_IMAGE:$GITHUB_SHA

      # Build and push backend
      - name: Build Backend
        run: docker build -t $BACKEND_IMAGE:$GITHUB_SHA -f backend/Dockerfile backend/
      - name: Push Backend
        run: docker push $BACKEND_IMAGE:$GITHUB_SHA

  cd:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Create Jenkins SSH key from GitHub secret
      - name: Create Jenkins SSH key
        run: |
          echo "${{ secrets.JENKINS_SSH_KEY }}" > jenkins-key.pem
          chmod 600 jenkins-key.pem

      - uses: hashicorp/setup-terraform@v2

      # Initialize Terraform and Deploy Jenkins
      - run: terraform init && terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}

      # Get Jenkins IP
      - run: echo "JENKINS_IP=$(terraform output -raw jenkins_ip)" >> $GITHUB_ENV

      # Wait for Jenkins to be ready
      - run: |
          echo "Waiting for Jenkins to be ready at http://$JENKINS_IP:8080"
          attempts=0
          max_attempts=30
          while [ $attempts -lt $max_attempts ]; do
            if curl -s -I http://$JENKINS_IP:8080/api/json | grep "200 OK"; then
              echo "Jenkins is ready!"
              break
            fi
            attempts=$((attempts+1))
            echo "Attempt $attempts/$max_attempts - Jenkins not ready yet, waiting 10 seconds..."
            sleep 10
          done
          if [ $attempts -eq $max_attempts ]; then
            echo "Timed out waiting for Jenkins to be ready"
            exit 1
          fi

      # Trigger Jenkins deployment job
      - name: Trigger Jenkins Deployment
        run: |
          curl -X POST "http://$JENKINS_IP:8080/job/deploy/buildWithParameters" \
            --user admin:admin \
            --data-urlencode FRONTEND_TAG=$GITHUB_SHA \
            --data-urlencode BACKEND_TAG=$GITHUB_SHA \
            --data-urlencode PRODUCTION_IP=${{ secrets.PRODUCTION_EC2_IP }}

      # Wait for deployment to complete
      - name: Wait for Deployment
        run: |
          sleep 60
          echo "Verifying deployment..."
          if curl -s http://$JENKINS_IP; then
            echo "Deployment successful!"
          else
            echo "Deployment verification failed"
            exit 1
          fi

      # Destroy Jenkins after deployment
      - name: Destroy Jenkins
        if: always() # Run even if previous steps failed
        run: terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
