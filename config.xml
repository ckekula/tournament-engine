<flow-definition plugin="workflow-job@2.41">
  <actions/>
  <description>Deployment Pipeline</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>FRONTEND_TAG</name>
          <description>Frontend Docker image tag</description>
          <defaultValue>latest</defaultValue>
        </hudson.model.StringParameterDefinition>
        <!-- Add other parameters similarly -->
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.82">
    <script><![CDATA[
      pipeline {
        agent any
        
        parameters {
            string(name: 'FRONTEND_TAG', defaultValue: 'latest', description: 'Frontend Docker image tag')
            string(name: 'BACKEND_TAG', defaultValue: 'latest', description: 'Backend Docker image tag')
            string(name: 'PRODUCTION_IP', defaultValue: '', description: 'Production server IP')
        }
        
        stages {
            stage('Deploy') {
                steps {
                    // Copy deployment files to production server
                    sh '''
                        scp -o StrictHostKeyChecking=no -i /var/jenkins_home/production-key.pem /home/ubuntu/deploy-compose.yml ubuntu@${params.PRODUCTION_IP}:/home/ubuntu/
                        
                        # SSH to production and deploy
                        ssh -o StrictHostKeyChecking=no -i /var/jenkins_home/production-key.pem ubuntu@${params.PRODUCTION_IP} "
                            export DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
                            export FRONTEND_TAG=${params.FRONTEND_TAG}
                            export BACKEND_TAG=${params.BACKEND_TAG}
                            
                            # Ensure docker is installed on production
                            if ! command -v docker &> /dev/null; then
                                sudo apt update
                                sudo apt install -y docker.io docker-compose
                                sudo usermod -aG docker ubuntu
                            fi
                            
                            # Deploy the application
                            sudo docker-compose -f deploy-compose.yml down || true
                            sudo docker-compose -f deploy-compose.yml up -d
                        "
                    '''
                }
            }
            
            stage('Verify') {
                steps {
                    sh '''
                        sleep 30  # Give services time to start
                        curl -f http://${params.PRODUCTION_IP} || exit 1  # Check frontend
                        curl -f http://${params.PRODUCTION_IP}:4000/health || exit 1  # Check backend health endpoint
                    '''
                }
            }
        }
    }
    ]]></script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>