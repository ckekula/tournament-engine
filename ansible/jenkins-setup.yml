---
- name: Setup Jenkins
  hosts: localhost
  become: yes
  tasks:
    - name: Install prerequisites
      apt:
        name:
          - openjdk-17-jdk
          - docker.io
          - docker-compose
        state: present
        update_cache: yes

    - name: Add Jenkins repository key
      apt_key:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        state: present

    - name: Add Jenkins repository
      apt_repository:
        repo: deb https://pkg.jenkins.io/debian-stable binary/
        state: present

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Enable and start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add jenkins user to docker group
      user:
        name: jenkins
        groups: docker
        append: yes

    - name: Create Jenkins init.groovy.d directory
      file:
        path: /var/lib/jenkins/init.groovy.d
        state: directory
        owner: jenkins
        group: jenkins

    - name: Ensure Jenkins has ownership of its home directory
      file:
        path: /var/lib/jenkins
        owner: jenkins
        group: jenkins
        recurse: yes

    - name: Wait for Jenkins to start up
      service:
        name: jenkins
        state: started
        enabled: yes

    - name: Create .ssh directory for jenkins
      file:
        path: /var/jenkins_home
        state: directory
        owner: jenkins
        group: jenkins
        mode: "0755"

    - name: Copy production SSH key
      copy:
        content: "{{ lookup('env', 'PRODUCTION_SSH_KEY') }}"
        dest: /var/jenkins_home/production-key.pem
        owner: jenkins
        group: jenkins
        mode: "0600"

    - name: Create deploy-compose.yml for deployment
      copy:
        src: files/docker-compose.yml
        dest: /home/ubuntu/deploy-compose.yml
        owner: ubuntu
        group: ubuntu
        mode: "0644"

    - name: Copy Jenkinsfile
      copy:
        src: files/Jenkinsfile
        dest: /var/lib/jenkins/Jenkinsfile
        owner: jenkins
        group: jenkins
        mode: "0644"

    - name: Wait for Jenkins to generate initial admin password
      wait_for:
        path: /var/lib/jenkins/secrets/initialAdminPassword
        delay: 30
        timeout: 300

    - name: Get Jenkins admin password
      shell: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_admin_password
      changed_when: false

    - name: Download Jenkins CLI
      get_url:
        url: http://localhost:8080/jnlpJars/jenkins-cli.jar
        dest: /tmp/jenkins-cli.jar
        mode: "0440"
      retries: 5
      delay: 10

    - name: Install Jenkins plugins
      shell: >
        java -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ -auth admin:{{ jenkins_admin_password.stdout }} 
        install-plugin workflow-aggregator git docker-workflow pipeline-stage-view workflow-job
      register: plugin_result
      failed_when: plugin_result.rc != 0 and "already installed" not in plugin_result.stderr
      changed_when: plugin_result.rc == 0

    - name: Restart Jenkins after plugin installation
      service:
        name: jenkins
        state: restarted

    - name: Wait for Jenkins to be ready after restart
      wait_for:
        port: 8080
        delay: 10
        timeout: 300

    - name: Create Jenkins job
      copy:
        dest: /tmp/jenkins-job.xml
        content: |
          <?xml version='1.1' encoding='UTF-8'?>
          <flow-definition plugin="workflow-job@2.40">
            <description>Deployment Pipeline</description>
            <keepDependencies>false</keepDependencies>
            <properties>
              <hudson.model.ParametersDefinitionProperty>
                <parameterDefinitions>
                  <hudson.model.StringParameterDefinition>
                    <name>FRONTEND_TAG</name>
                    <defaultValue>{{ lookup('env', 'GITHUB_SHA') | replace('&', '&amp;') }}</defaultValue>
                    <description>Frontend Docker image tag</description>
                  </hudson.model.StringParameterDefinition>
                  <hudson.model.StringParameterDefinition>
                    <name>BACKEND_TAG</name>
                    <defaultValue>{{ lookup('env', 'GITHUB_SHA') | replace('&', '&amp;') }}</defaultValue>
                    <description>Backend Docker image tag</description>
                  </hudson.model.StringParameterDefinition>
                  <hudson.model.StringParameterDefinition>
                    <name>PRODUCTION_IP</name>
                    <defaultValue>{{ lookup('env', 'PRODUCTION_IP') | default('') | replace('&', '&amp;') }}</defaultValue>
                    <description>Production server IP</description>
                  </hudson.model.StringParameterDefinition>
                </parameterDefinitions>
              </hudson.model.ParametersDefinitionProperty>
            </properties>
            <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
              <script>{{ lookup('file', '/var/lib/jenkins/Jenkinsfile') | replace('&', '&amp;') }}</script>
              <sandbox>true</sandbox>
            </definition>
            <triggers/>
            <disabled>false</disabled>
          </flow-definition>

    - name: Verify Jenkins job XML
      command: cat /tmp/jenkins-job.xml
      register: xml_content
      changed_when: false

    - name: Debug XML content
      debug:
        var: xml_content.stdout

    - name: Create Jenkins job using CLI
      shell: >
        java -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ -auth admin:{{ jenkins_admin_password.stdout }} 
        create-job deployment < /tmp/jenkins-job.xml
      args:
        executable: /bin/bash
      register: job_result
      failed_when: job_result.rc != 0 and "already exists" not in job_result.stderr
      changed_when: job_result.rc == 0

    - name: Set environment variable for Jenkins job
      lineinfile:
        path: /etc/default/jenkins
        line: 'DOCKERHUB_USERNAME={{ lookup("env", "DOCKERHUB_USERNAME") }}'
        create: yes

    - name: Restart Jenkins to apply changes
      service:
        name: jenkins
        state: restarted

    - name: Wait for Jenkins to be ready after restart
      wait_for:
        port: 8080
        delay: 10
        timeout: 120

    - name: Set readable Jenkins admin password
      copy:
        content: "{{ jenkins_admin_password.stdout }}"
        dest: /home/ubuntu/jenkins_admin_password.txt
        mode: "0600"
        owner: ubuntu
        group: ubuntu

    - name: Print Jenkins credentials
      debug:
        msg:
          - "Jenkins is available at http://{{ ansible_host }}:8080"
          - "Admin username: admin"
          - "Admin password: {{ jenkins_admin_password.stdout }}"
