---
- name: Setup Jenkins in Docker
  hosts: localhost
  become: yes
  vars:
    jenkins_admin_password: admin # use vault for production
    jenkins_home: /var/jenkins_home
    docker_compose_version: "2.22.0"
    github_sha: "{{ lookup('env', 'GITHUB_SHA') | default('latest', true) }}"
    dockerhub_username: "{{ lookup('env', 'DOCKERHUB_USERNAME') }}"

  tasks:
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
          - jq
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
        update_cache: yes

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: "0755"

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Create Jenkins directories
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      with_items:
        - /var/jenkins_home
        - /var/jenkins_home/casc_configs
        - /home/ubuntu/jenkins_config

    - name: Copy Jenkins Docker Compose file
      copy:
        src: /home/ubuntu/ansible/files/docker-compose.yml
        dest: /home/ubuntu/docker-compose.yml
        remote_src: yes # file is already on the remote host

    - name: Copy deployment docker-compose file
      copy:
        src: /home/ubuntu/ansible/files/deploy-compose.yml
        dest: /home/ubuntu/deploy-compose.yml
        remote_src: yes

    - name: Copy Jenkins configuration
      copy:
        src: /home/ubuntu/ansible/files/jenkins.yaml
        dest: /home/ubuntu/jenkins_config/jenkins.yaml
        remote_src: yes

    - name: Start Jenkins container
      command: docker-compose up -d
      args:
        chdir: /home/ubuntu

    - name: Wait for Jenkins to start
      wait_for:
        port: 8080
        delay: 10
        timeout: 300

    # Install plugins before configuring jobs
    - name: Install Jenkins plugins
      command: >
        docker exec jenkins curl -s -X POST 
        -u admin:admin 
        --data-urlencode "script=
        import jenkins.model.*
        import java.util.logging.Logger
        def instance = Jenkins.getInstance()
        def pm = instance.getPluginManager()
        def uc = instance.getUpdateCenter()
        def plugins = [
          'workflow-aggregator',
          'git',
          'docker-workflow',
          'pipeline-stage-view',
          'configuration-as-code',
          'job-dsl'
        ]
        plugins.each { plugin ->
          if (!pm.getPlugin(plugin)) {
            def plugin = uc.getPlugin(plugin)
            if (plugin) {
              plugin.deploy()
              logger.info('Installing ' + plugin.getDisplayName())
            }
          }
        }
        instance.save()
        " http://localhost:8080/scriptText
      register: plugin_install
      retries: 3
      delay: 15
      until: plugin_install.rc == 0

    - name: Copy production SSH key
      copy:
        content: "{{ lookup('env', 'PRODUCTION_SSH_KEY') }}"
        dest: /var/jenkins_home/production-key.pem
        mode: "0600"

    - name: Restart Jenkins to apply plugin changes
      command: docker restart jenkins
      async: 10
      poll: 0

    - name: Wait for Jenkins after restart
      wait_for:
        port: 8080
        delay: 10
        timeout: 60
      register: jenkins_ready
      until: jenkins_ready is success
      retries: 5
      delay: 10

    # Create the deploy job using the Groovy script
    - name: Create deployment job
      command: >
        docker exec jenkins curl -s -X POST 
        -u admin:admin 
        --data-urlencode "script=
        import jenkins.model.Jenkins
        import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition
        import org.jenkinsci.plugins.workflow.job.WorkflowJob
        import hudson.model.ParametersDefinitionProperty
        import hudson.model.StringParameterDefinition

        // Create job
        def jenkins = Jenkins.instance
        def jobName = 'deploy'
        def job = jenkins.getItem(jobName) ?: jenkins.createProject(WorkflowJob.class, jobName)

        // Define job parameters
        def params = new ParametersDefinitionProperty([
          new StringParameterDefinition('FRONTEND_TAG', 'latest', 'Frontend Docker image tag'),
          new StringParameterDefinition('BACKEND_TAG', 'latest', 'Backend Docker image tag'),
          new StringParameterDefinition('PRODUCTION_IP', '', 'Production server IP')
        ])

        // Define pipeline script
        def pipelineScript = '''
        pipeline {
          agent any
          
          parameters {
              string(name: 'FRONTEND_TAG', defaultValue: 'latest', description: 'Frontend Docker image tag')
              string(name: 'BACKEND_TAG', defaultValue: 'latest', description: 'Backend Docker image tag')
              string(name: 'PRODUCTION_IP', defaultValue: '', description: 'Production server IP')
          }
          
          stages {
              stage('Deploy') {
                  steps {
                      // Copy deployment files to production server
                      sh '''
                          scp -o StrictHostKeyChecking=no -i /var/jenkins_home/production-key.pem /home/ubuntu/deploy-compose.yml ubuntu@${params.PRODUCTION_IP}:/home/ubuntu/
                          
                          # SSH to production and deploy
                          ssh -o StrictHostKeyChecking=no -i /var/jenkins_home/production-key.pem ubuntu@${params.PRODUCTION_IP} \"
                              export DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
                              export FRONTEND_TAG=${params.FRONTEND_TAG}
                              export BACKEND_TAG=${params.BACKEND_TAG}
                              
                              # Ensure docker is installed on production
                              if ! command -v docker &> /dev/null; then
                                  sudo apt update
                                  sudo apt install -y docker.io docker-compose
                                  sudo usermod -aG docker ubuntu
                              fi
                              
                              # Deploy the application
                              sudo docker-compose -f deploy-compose.yml down || true
                              sudo docker-compose -f deploy-compose.yml up -d
                          \"
                      '''
                  }
              }
              
              stage('Verify') {
                  steps {
                      sh '''
                          sleep 30  # Give services time to start
                          curl -f http://${params.PRODUCTION_IP} || exit 1  # Check frontend
                          curl -f http://${params.PRODUCTION_IP}:4000/health || exit 1  # Check backend health endpoint
                      '''
                  }
              }
          }
        }
        '''

        // Set job properties
        job.setDefinition(new CpsFlowDefinition(pipelineScript, true))
        job.addProperty(params)

        // Save job
        job.save()
        jenkins.reload()

        return 'Deploy job created/updated successfully'
        " http://localhost:8080/scriptText
      register: job_creation
      retries: 3
      delay: 10
      until: job_creation.rc == 0

    - name: Verify job was created
      command: >
        docker exec jenkins curl -s
        -u admin:admin
        http://localhost:8080/job/deploy/api/json
      register: job_verification
      retries: 3
      delay: 5
      until: job_verification.rc == 0
