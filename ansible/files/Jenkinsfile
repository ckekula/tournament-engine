pipeline {
    agent any
    
    parameters {
        string(name: 'FRONTEND_TAG', defaultValue: 'latest', description: 'Frontend Docker image tag')
        string(name: 'BACKEND_TAG', defaultValue: 'latest', description: 'Backend Docker image tag')
        string(name: 'PRODUCTION_IP', defaultValue: '', description: 'Production server IP')
        string(name: 'DOCKERHUB_USERNAME', defaultValue: '', description: 'Docker Hub username')
    }
    
    stages {
        stage('Deploy') {
            steps {
                sh '''
                    echo "Creating deployment file"
                    cat > deploy-compose.yml << 'EOL'
services:
  frontend:
    image: ${DOCKERHUB_USERNAME}/devops-frontend:${FRONTEND_TAG}
    ports:
      - "80:80"
    restart: always
    depends_on:
      - backend
    network: "tuna-app"

  backend:
    image: ${DOCKERHUB_USERNAME}/devops-backend:${BACKEND_TAG}
    ports:
      - "4000:4000"
    restart: always
    network: "tuna-app"
  
  networks:
    tuna-app:
        driver: bridge
EOL
                    
                    echo "Copying deployment file to production server"
                    if [ -z "${PRODUCTION_IP}" ]; then
                        echo "Error: PRODUCTION_IP is not set"
                        exit 1
                    fi
                    
                    # Debug info
                    echo "DOCKERHUB_USERNAME: ${DOCKERHUB_USERNAME}"
                    echo "FRONTEND_TAG: ${FRONTEND_TAG}"
                    echo "BACKEND_TAG: ${BACKEND_TAG}"
                    echo "PRODUCTION_IP: ${PRODUCTION_IP}"
                    
                    # Copy deployment files to production server
                    scp -o StrictHostKeyChecking=no -i /var/jenkins_home/production-key.pem deploy-compose.yml ubuntu@${PRODUCTION_IP}:/home/ubuntu/
                    
                    # SSH to production and deploy
                    ssh -o StrictHostKeyChecking=no -i /var/jenkins_home/production-key.pem ubuntu@${PRODUCTION_IP} "
                        # Create .env file with values
                        echo 'DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}' > .env
                        echo 'FRONTEND_TAG=${FRONTEND_TAG}' >> .env
                        echo 'BACKEND_TAG=${BACKEND_TAG}' >> .env
                        
                        # Ensure docker is installed on production
                        if ! command -v docker &> /dev/null; then
                            sudo apt update
                            sudo apt install -y docker.io docker-compose
                            sudo usermod -aG docker ubuntu
                        fi
                        
                        # Deploy the application
                        sudo docker-compose -f deploy-compose.yml down || true
                        sudo docker-compose -f deploy-compose.yml up -d
                    "
                '''
            }
        }
        
        stage('Verify') {
            steps {
                sh '''
                    echo "Verifying deployment"
                    if [ -z "${PRODUCTION_IP}" ]; then
                        echo "Error: PRODUCTION_IP is not set"
                        exit 1
                    fi
                    
                    sleep 30  # Give services time to start
                    curl -f http://${PRODUCTION_IP} || echo "Frontend not responding"
                    curl -f http://${PRODUCTION_IP}:4000/health || echo "Backend health endpoint not responding"
                '''
            }
        }
    }
}